---
title: Ordinal Brush
features:
  - Brushes
---
<h5>{{title}}</h5>
<p>
  This example demonstrates how to use a d3 brush with d4 to select items within a chart with an ordinal scale. This example
  is based off an older <a href="https://github.com/mbostock/d3/blob/v2.9.0/examples/brush/brush-ordinal.html" target="_new">d3 brush example</a>.
  Brushes in d3 are a means for selecting an arbitrary number of data elements within a chart. Typically this is done by creating a brush area
  and dragging it around the chart area.
</p>
<p>
  The purpose of this example is to give a simple example of how you might tie in a d3 brush into a chart using d4. For more details on how
  brushes work consult the <a href="https://github.com/mbostock/d3/wiki/SVG-Controls#brush" target="_new">d3 documentation</a> directly.
</p>

<hr/>
<script type="text/javascript" charset="utf-8" id='source_code'>
'use strict';

$(document).ready(function(){
  var data = d3.svg.symbolTypes;

  /*
    This example takes a bit of setup to replicate. In this case we are creating
    a simple throw away feature used to render the svg shapes out. This does not
    expressly deal with brushes so you can safely ignore this code, unless you
    are interested.
  */
  d4.feature('pathSeries', function(name) {
    return {
      accessors: {
        classes: function(){
          return 'path';
        }
      },
      render: function(scope, data, selection) {
        selection.append('g').attr('class', name);
        var group = selection.select('.' + name).selectAll('g').data(data);
        group.exit().remove();
        group.enter().append('g');
        var path = group.selectAll('path')
        .data(function(d){
          return d.values;
        });
        path.enter().append('path')
        .attr('class', d4.functor(scope.accessors.classes).bind(this))
        .attr('transform', function(d) {
          return 'translate(' + this.x(d) + ',' + (this.height / 2) + ')';
        }.bind(this))
        .attr('d', d3.svg.symbol().type(String).size(this.height));
      }
    };
  }).call(this);

  /*
    Now that we have our symbol feature we can create our chart and assign the
    brush callbacks.
   */
  var chart = d4.baseChart().mixin([
    {
      'name': 'pathSeries',
      'feature' : d4.features.pathSeries
    },
    {
      'name': 'xAxis',
      'feature': d4.features.xAxis
    }
  ]);
  chart
  .margin({top: 10, right: 10, bottom: 40, left:10})
  .outerHeight(100)
  .outerWidth($('#ordinal_brush').width())
  .x(function(x){
    x
    .domain(data)
    .rangePoints([0, chart.width()],1);
  })
  .using('xAxis', function(axis){
    axis.tickSize(10,5);
  })
  .using('pathSeries', function(path){

    /*
      To make a svg element selectable by the brush simply give it the
      "brushable" class. In this example we override the classes accessor
      of the circles feature to give each circle drawn to the chart the
      "brushable" class.

      Using a class-based approach is only one way to
      handle the selection of brushable items. Check the other examples for
      a more detailed exploration of how brushes can be used in d4.
    */
    path.classes(function () {
      return 'brushable';
    });
  })

  // Here we mix in the d3 brush.
  .mixin({'name' : 'brush', 'feature' : d4.features.brush })

  // Here is where we use the brush.
  .using('brush', function(brush){
    brush

    /*
      Let this brush use the chart's x scale function to determine extents.
    */
    .x(this.x)

    /*
      The `brushstart` method is invoked when the user first selects the brushable
      area with a click or touch. By default d4 already applies the selecting
      class. It is repeated here for completeness of the example.
    */
    .brushstart(function(){
      d3.select('#ordinal_brush svg')
      .classed('selecting', true);
    })

    /*
      Everytime the user moves the brush this method sweeps the brushable elements
      looking for selections to add or remove. By default d4 already detects if
      a selectable element is within the brush's extent. It is repeated here for
      the completeness of the example.
    */
    .brushmove(function(){
      var e = d3.event.target.extent();
      d3.selectAll('.brushable').classed('selected', function(d) {
        return e[0] <= (d = this.x(d)) && d <= e[1];
      }.bind(this));
    })

    /*
      This method is called when the user releases their mouse or removes their
      finger from the touch device. By default d4 already removes the selecting
      class. It is repeated here for the completeness of the example.
    */
    .brushend(function(){
      d3.select('#ordinal_brush svg').classed('selecting', !d3.event.target.empty());
    })

    /*
      The selection function returns the svg group created by the feature. This
      allows us to set the brush to the height of the chart by default.
    */
    .selection(function(selection){
      selection.selectAll('rect').attr('height', this.height);
    });
  });

  d3.select('#ordinal_brush')
  .datum(data)
  .call(chart);
});
</script>
<div id="ordinal_brush"></div>

<h6>JavaScript Code</h6>
<pre><code id="code" class="language-javascript"></code></pre>
<h6>CSS</h6>
<pre><code id="code" class="language-css">
  #ordinal_brush .selecting path {
    fill-opacity: .2;
  }

  #ordinal_brush .selecting path.selected {
    stroke: #f00;
    stroke-width: 2px;
  }

  #ordinal_brush .axis path, .axis line {
    fill: none;
    stroke: #000;
    shape-rendering: crispEdges;
  }

  #ordinal_brush .brush .extent {
    stroke: #fff;
    fill-opacity: .125;
    shape-rendering: crispEdges;
  }
</code></pre>
{{> disqus }}