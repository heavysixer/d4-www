---
title: Line Series Labels
features:
  - Using Mouse Position
---

<h5>{{title}}</h5>
<p>
  This example demonstrates a line chart where the line series labels have been
  configured to return the closest value based on the mouse location.
</p>
<hr/>
<script type="text/javascript" charset="utf-8" id='source_code'>
'use strict';

$(document).ready(function() {

  // CSV format looks like this:
  // "Oct 27, 2009",197.37,27019700
  var parseDate = d3.time.format('%b %Y').parse;

  // We'll use the D3 CSV parser, and call the renderChart function
  // directly from it.
  d3.csv('{{assets}}/data/stocks.csv')
  .row(function(d) {
    return {
      date: parseDate(d.date),
      price: +d.price,
      symbol: d.symbol
    };
  })
  .get(function(error, rows) {
    var parser = d4.parsers.nestedGroup()
    .x('date')
    .y('price')
    .nestKey('symbol')
    .value('price')(rows);
    renderChart(parser.data);
  }.bind(this));

  var renderChart = function(data){
    var chart = d4.charts.line()
      .marginLeft(70)
      .marginRight(70)
      .outerWidth($('#time_series').width())
      .x(function(x) {

        // Just like other scales you can specify a min or max you just
        // need to make sure to parse the date first.
        //x.min(parseDate('Nov 14, 2010'));

        // by default d4 makes the x axis ordinal so we'll set it to time
        // and use the date property of the data object as the key.
        x.scale('time');
        x.key('date');
      })
      .y(function(y) {
        y
        .key('price');
      })

      .using('lineSeriesLabels', function(labels){

        // By setting this to true we are enabling d4
        labels.displayXValue(true);
      });

    d3.select('#time_series')
      .datum(data)
      .call(chart);
  };
});


</script>
<div id="time_series"></div>
<h6>JavaScript Code</h6>
<pre><code id="code" class="language-javascript"></code></pre>
{{> disqus }}
