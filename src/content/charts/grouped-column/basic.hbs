---
title: Basic Grouped Column Chart
charts:
  - Grouped Column Chart
concepts:
  - Parsers
---

<h5>{{title}}</h5>
<p>
  The grouped column chart is used to compare a series of data elements grouped
  along the xAxis. This chart is often useful in conjunction with a stacked column
  chart because they can use the same data series, and where the stacked column highlights
  the sum of the data series across an axis the grouped column can be used to show the
  relative distribution.
</p>
<p>
  This example also demonstrates one of the various data parsers available to
  developers using d4. In this example, we use the <code>nestedGroup</code> parser
  which makes it trivial for the developer to prepare the incoming data in a way
  that the chart expects it.
</p>
<hr/>
<script type="text/javascript" charset="utf-8" id='source_code'>
'use strict';

$(document).ready(function(){
  var data = [
      { year: '2010', unitsSold:-100, salesman : 'Bob' },
      { year: '2011', unitsSold:200, salesman : 'Bob' },
      { year: '2012', unitsSold:300, salesman : 'Bob' },
      { year: '2013', unitsSold:400, salesman : 'Bob' },
      { year: '2014', unitsSold:500, salesman : 'Bob' },
      { year: '2010', unitsSold:100, salesman : 'Gina' },
      { year: '2011', unitsSold:100, salesman : 'Gina' },
      { year: '2012', unitsSold:-100, salesman : 'Gina' },
      { year: '2013', unitsSold:500, salesman : 'Gina' },
      { year: '2014', unitsSold:600, salesman : 'Gina' },
      { year: '2010', unitsSold:400, salesman : 'Average' },
      { year: '2011', unitsSold:0, salesman : 'Average' },
      { year: '2012', unitsSold:400, salesman : 'Average' },
      { year: '2013', unitsSold:400, salesman : 'Average' },
      { year: '2014', unitsSold:400, salesman : 'Average' }
    ];

  var parsedData = d4.parsers.nestedGroup()
    .x('year')
    .y('unitsSold')
    .value('unitsSold')(data);

  var chart = d4.charts.groupedColumn();
  chart
  .outerWidth($('#example').width())
  .x(function(x){
    x.key('year');

    // Just for fun lets reduce the outer padding of the column chart.
    // This also shows how d4 transparently passes the appropriate calls to d3.
    x.rangeRoundBands([0, chart.width()], 0.2, 0.1);
  })
  .groups(function(groups) {
    groups.key('salesman');
  })
  .y(function(y){
    y.key('unitsSold');
  })
  .groupsOf(parsedData.data[0].values.length);

  d3.select('#example')
  .datum(parsedData.data)
  .call(chart);
});

</script>
<div id="example"></div>
<h6>JavaScript Code</h6>
<pre><code id="code" class="language-javascript"></code></pre>
{{> disqus }}
