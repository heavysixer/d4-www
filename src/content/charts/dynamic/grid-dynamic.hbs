---
title: Grid Feature
concepts:
  - Dynamic data
---

<h5>{{title}}</h5>
<p>
</p>
<p>
  The following section demonstrates a few ways to interact with d4's <code>grid</code> feature.
</p>
<div class="alert alert-warning">
  <strong>Note:</strong> If you do not apply a CSS style to the grid feature it will simply appear
  as a large black square.
</div>

<hr/>
<script type="text/javascript" charset="utf-8" id='source_code'>
'use strict';

$(document).ready(function(){
  var data = [
      { year: '2010', unitsSold:-100, salesman : 'Bob' },
      { year: '2011', unitsSold:200, salesman : 'Bob' },
      { year: '2012', unitsSold:300, salesman : 'Bob' },
      { year: '2013', unitsSold:400, salesman : 'Bob' },
      { year: '2014', unitsSold:500, salesman : 'Bob' },
      { year: '2010', unitsSold:100, salesman : 'Gina' },
      { year: '2011', unitsSold:100, salesman : 'Gina' },
      { year: '2012', unitsSold:-100, salesman : 'Gina' },
      { year: '2013', unitsSold:500, salesman : 'Gina' },
      { year: '2014', unitsSold:600, salesman : 'Gina' },
      { year: '2010', unitsSold:400, salesman : 'Average' },
      { year: '2011', unitsSold:0, salesman : 'Average' },
      { year: '2012', unitsSold:400, salesman : 'Average' },
      { year: '2013', unitsSold:400, salesman : 'Average' },
      { year: '2014', unitsSold:400, salesman : 'Average' }
    ];

  var renderChart = function(data) {
    var parsedData = d4.parsers.nestedGroup()
      .x('year')
      .y('unitsSold')
      .value('unitsSold')(data);

    var chart = d4.charts.groupedColumn()
    .outerWidth($('#grid').width())
    .x(function(x){
      x.key('year');
    })
    .y(function(y){
      y.key('unitsSold')
      .max(800);
    })

    // set `groupsOf` to the length of the largest set of values to make column
    // width consistent.
    .groupsOf(Math.max.apply(Math, parsedData.data.map(function(d) {
      return d.values.length;
    })))

    // supplying an index allows us to mix the grid in at the zero index which
    // is essentialy the very first layer to drawn and therefore the back of the
    // chart.
    .mixin({name : 'grid', feature : d4.features.grid, index: 0 });

    d3.select('#grid')
    .datum(parsedData.data)
    .call(chart);
  }

  setInterval(function() {
    renderChart(sample(data, 10));
  }, 1500);

  renderChart(sample(data, 10));

  // Sample n random values from our array of data
  function sample(arr, size) {
    for (var i = arr.length - 1; i > 0; i--) {
        var j = Math.floor(Math.random() * (i + 1));
        var temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
    return arr.slice(0, size);
  }
});

</script>
<div id="grid"></div>
<h6>JavaScript Code</h6>
<pre><code id="code" class="language-javascript"></code></pre>
<h6>CSS Code</h6>
<pre><code id="css" class="language-css">
  #grid .d4 .grid.border rect {
      fill: none;
      stroke: #aaa;
      stroke-width: 1px;
      shape-rendering: crispEdges;
  }

  #grid .d4 .grid line {
      fill:none;
      stroke: #aaa;
      stroke-width: 1px;
      stroke-dasharray :3, 4;
      shape-rendering: crispEdges;
  }
</code></pre>
{{> disqus }}
