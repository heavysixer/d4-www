---
title: Using afterRender() within a feature
concepts:
  - Intermediate Concepts
---

<h5>{{title}}</h5>
<p>
  All features have an <code>afterRender()</code> function which as the name suggests will be called only after the feature has
  rendered. This function is useful if you need to modify aspects of the feature's output which are not easily completed using the
  feature's native accessors. The function passes the following variables in as arguments:
    <ul>
      <li><strong>feature</strong> - the feature object itself</li>
      <li><strong>parsedData</strong> - The data used by the feature during the render process</li>
      <li><strong>chartArea</strong> - The d3 selection containing the chart area where all features are rendered</li>
      <li><strong>selection</strong> - The selection generated by the feature itself</li>
    </ul>
</p>
<p>
  This example will apply a hatch pattern to the first two rows of the column chart. Something the bar feature
  does not normally support.
</p>
<hr/>
<script type="text/javascript" charset="utf-8" id='source_code'>
'use strict';

$(document).ready(function() {
  var graphData = [];

  for (var i = 0; i < 25; i++) {
    graphData.push({
      x: i,
      y: i
    });
  }
  var chart = d4.charts.column();
  chart
    .using('bars', function(bar) {
      bar
        .afterRender(function(feature, parsedData, chartArea, selection) {

          // Hatch pattern based off this example:
          // http://stackoverflow.com/questions/13069446/simple-fill-pattern-in-svg-diagonal-hatching
          var defs = this.svg.select('defs');
          d4.appendOnce(defs, 'pattern')
            .attr('id', 'diagonalHatch')
            .attr('patternUnits', 'userSpaceOnUse')
            .attr('width', 4)
            .attr('height', 4)
            .append('path')
            .attr('d', 'M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2')
            .attr('class', 'hatch');

          // Get the position of the last two rects and create a new ones
          // with the diagonal hatch to overlay ontop.
          var stripedBar = selection.slice(selection.length - 2, selection.length);
          d4.each(stripedBar, function(b) {
            chartArea.append('rect')
              .attr('x', b[0].attributes.x.value)
              .attr('y', b[0].attributes.y.value)
              .attr('class', 'noClick')
              .attr('width', b[0].attributes.width.value)
              .attr('height', b[0].attributes.height.value)
              .attr('fill', 'url(#diagonalHatch)');
          }.bind(this));
        });
    });

  d3.select('#example')
  .datum(graphData)
  .call(chart);

});


</script>
<div id="example"></div>
<h6>JavaScript Code</h6>
<pre><code id="code" class="language-javascript"></code></pre>
{{> disqus }}
